<?php
/**
 *
 * The content is generated by using TextMate, and edited by yuhari.
 *
 *
 * 注释使用注册
 *
 *
 * @author 	   yuhari
 * @maintainer yuhari
 * @version    1.0.0
 * @modified   2019/08/12 12:03:21
 *
 */
namespace Util ;

use Doctrine\Common\Annotations\AnnotationReader;
use Doctrine\Common\Annotations\FileCacheReader;
use Doctrine\Common\Annotations\AnnotationRegistry as AnnoRegistry ;
use Util\Annotations\Annotation ;
use Util\Annotations\Bootstrap ;
use Util\Annotations\Before ;
use Util\Annotations\After ;


final class AnnotationRegistry {
	
	/**
	 * 注释标记mark定义
	 *
	 * @var array
	 */
	private $annotation_markers = [] ;
		
	/**
	 * annotation reader
	 *
	 * @var string
	 */
	private $annotation_reader ;
		
	/**
	 * 设置注释marker
	 *
	 * @param  default
	 * @return $this
	 */
	public function setAnnotationMarker(Annotation $annotation, $callable) {
		$this->annotation_markers[get_class($annotation)] = $callable ;
	}
	
	/**
	 * construct func
	 *
	 * @param  default
	 * @return void
	 */
	public function __construct() {
		AnnoRegistry::registerLoader('class_exists') ;
		
		$this->annotation_reader = new FileCacheReader(new AnnotationReader(), "runtime/annotation", true) ;	
	}
	
	/**
	 * explain annotation
	 *
	 * @param  default
	 * @return void
	 */
	protected function explainAnnotation(Annotation $annotation) {
		if (isset($this->annotation_markers[get_class($annotation)])) {
			$annotation->setMarker($this->annotation_markers[get_class($annotation)]) ;
		}
		
		$annotation->mark() ;
	}
	
	/**
	 * run bootstrap class
	 */
	public function runBootstrapClass($classname) {
		if (class_exists($classname, false)) {
			$c = new \ReflectionClass($classname) ;
			$boots = $this->annotation_reader->getClassAnnotations($c) ;
			
			foreach($boots as $boot) {
				if ($boot instanceof Bootstrap) {
					$boot->setTarget(['CLASS', $c->getName()]) ;
					$this->explainAnnotation($boot) ;
				}
			}
			
			$m = $c->getMethods() ;
			foreach($m as $v) {
				$boots = $this->annotation_reader->getMethodAnnotations($v) ;
				foreach($boots as $boot) {
					if ($boot instanceof Bootstrap) {
						$boot->setTarget(['METHOD', $c->getName(), $v->getName()]) ;
						$this->explainAnnotation($boot) ;
					}
				}
			}
		}
	}
	
	/**
	 * run bootstrap
	 */
	public function runBootstrap($namespace, $path) {
		if ($files = dir($path)) {
			foreach($files as $file) {
				if ($p = strrpos($file, '.')) {
					if (substr($file, $p+1) == 'php') {
						$classname = $namespace . '\\' . substr($file,0,$p) ;
						
						if (class_exists($classname, false)) {
							$c = new \ReflectionClass($classname) ;
							$boots = $this->annotation_reader->getClassAnnotations($c) ;
							
							foreach($boots as $boot) {
								if ($boot instanceof Bootstrap) {
									$boot->setTarget(['CLASS', $c->getName()]) ;
									$this->explainAnnotation($boot) ;
								}
							}
							
							$m = $c->getMethods() ;
							foreach($m as $v) {
								$boots = $this->annotation_reader->getMethodAnnotations($v) ;
								foreach($boots as $boot) {
									if ($boot instanceof Bootstrap) {
										$boot->setTarget(['METHOD', $c->getName(), $v->getName()]) ;
										$this->explainAnnotation($boot) ;
									}
								}
							}
						}
					}
				}
			}
		}
	}
	
	/**
	 * run class
	 */
	public function runClass($classname, $args = []) {
		$c = new \ReflectionClass($classname) ;
		$annotations = $this->annotation_reader->getClassAnnotations($c) ;	
			
		foreach($annotations as $annotation) {
			if ($annotation instanceof Before) {
				$annotation->setTarget(['CLASS', $c->getName()]) ;
				$annotation->setTargetArgs($args) ;
				$this->explainAnnotation($annotation) ;
			}
		}

		$class = new $classname(...$args) ;
		
		foreach($annotations as $annotation) {
			if ($annotation instanceof After) {
				$annotation->setTarget(['CLASS', $c->getName()]) ;
				$annotation->setTargetArgs($args) ;
				$this->explainAnnotation($annotation) ;
			}
		}
		
		return $class ;
	}
	
	/**
	 * run method
	 */
	public function runMethod($class, $funcname, $args = []) {
		$classname = $class ;
		if (!is_string($classname)) {
			$classname = get_class($class) ;
		}
		
		$m = new \ReflectionMethod($classname, $funcname) ;
		$annotations = $this->annotation_reader->getMethodAnnotations($m) ;
		
		foreach($annotations as $annotation) {
			if ($annotation instanceof Before) {
				$annotation->setTarget(['METHOD', $classname, $funcname]) ;
				$annotation->setTargetArgs($args) ;
				$this->explainAnnotation($annotation) ;
			}
		}
		
		if ($m->isStatic()) {
			$r = $class::$funcname(...$args) ;
		} else {
			$r = $class->$funcname(...$args) ;
		}
		
		foreach($annotations as $annotation) {
			if ($annotation instanceof After) {
				$annotation->setTarget(['METHOD', $classname, $funcname]) ;
				$annotation->setTargetArgs($args) ;
				$this->explainAnnotation($annotation) ;
			}
		}
		
		return $r ;
	}
}
